import polars as pl
import ASHC_v3 as ashc
from ASHC_v3.CommonFunction import Polars_toDict

# Functions - JCMerchHier, OKMerchHier, PAMerchHier, VIMerchHier, UZMerchHier, YRMerchHier
def JCMerchHier(dfTemp):
    # JC Master
    df = pl.read_excel(source=ashc.JacadiMaster,sheet_name="JC_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Bar Code').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Bar Code'),)
    Division = Polars_toDict(df, 'Bar Code', 'Age')
    ProductGroup = Polars_toDict(df, 'Bar Code', 'Gender')
    ItemCategory = Polars_toDict(df, 'Bar Code', 'Family')
    ItemClass = Polars_toDict(df, 'Bar Code', 'Rayon')
    brSize = Polars_toDict(df, 'Bar Code', 'Size')
    ItemSubClass = Polars_toDict(df, 'Bar Code', 'Theme')
    Remarks = Polars_toDict(df, 'Bar Code', 'Remarks')
    Type = Polars_toDict(df, 'Bar Code', 'Type')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ProductGroup, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(brSize, return_dtype=pl.String, default=None).alias('Size'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Theme'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Type, return_dtype=pl.String, default=None).alias('Type'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp

def OKMerchHier(dfTemp):
    # OK Master
    df = pl.read_excel(source=ashc.OkaidiMaster,sheet_name="OK_Master",).fill_null(0)        # schema_overrides=col_dtype,infer_schema_length=20000,
    df.fill_nan(0)
    df = df.with_columns(pl.col('Bar Code').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Bar Code'),)
    Division = Polars_toDict(df, 'Bar Code', 'Division')
    Gender = Polars_toDict(df, 'Bar Code', 'Gender')
    ItemCategory = Polars_toDict(df, 'Bar Code', 'Item Category')
    ItemClass = Polars_toDict(df, 'Bar Code', 'Item Class')
    ItemSubClass = Polars_toDict(df, 'Bar Code', 'Item SubClass')
    brSize = Polars_toDict(df, 'Bar Code', 'Size')
    Remarks = Polars_toDict(df, 'Bar Code', 'Remarks')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Gender, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(brSize, return_dtype=pl.String, default=None).alias('Size'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Theme'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Type'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp


def PAMerchHier(dfTemp):
    # Perfois Master
    df = pl.read_excel(source=ashc.PerfoisMaster,sheet_name="PA_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Bar Code').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Bar Code'),)
    Category = Polars_toDict(df, 'Bar Code', 'Category')
    Family = Polars_toDict(df, 'Bar Code', 'Family')
    SubFamily = Polars_toDict(df, 'Bar Code', 'SubFamily')
    FashionType = Polars_toDict(df, 'Bar Code', 'Fashion Type')
    Theme = Polars_toDict(df, 'Bar Code', 'Theme')
    Remarks = Polars_toDict(df, 'Bar Code', 'Remarks')
    StyleCode = Polars_toDict(df, 'Bar Code', 'Style Code')
    StyleColour = Polars_toDict(df, 'Bar Code', 'Style Colour')
    CordSets = Polars_toDict(df, 'Bar Code', 'Cord Sets')
    Season = Polars_toDict(df, 'Bar Code', 'Season')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Category, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Category, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Category, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Family, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(SubFamily, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(StyleCode, return_dtype=pl.String, default=None).alias('Style'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(StyleColour, return_dtype=pl.String, default=None).alias('Style_Colour'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Category, return_dtype=pl.String, default=None).alias('Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Family, return_dtype=pl.String, default=None).alias('Family'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(SubFamily, return_dtype=pl.String, default=None).alias('Sub Family'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(FashionType, return_dtype=pl.String, default=None).alias('Fashion Type'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Season, return_dtype=pl.String, default=None).alias('PA Season'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Theme, return_dtype=pl.String, default=None).alias('Theme'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Type'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(CordSets, return_dtype=pl.String, default=None).alias('Cord Sets'))
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp


def UZMerchHier(dfTemp):
    # UZ Master
    df = pl.read_excel(source=ashc.UndizMaster,sheet_name="UZ_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Item No').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Item No'),)
    Style = Polars_toDict(df, 'Item No', 'Style')
    ColourCode = Polars_toDict(df, 'Item No', 'Colour Code')
    SizeCode = Polars_toDict(df, 'Item No', 'Size')
    Division = Polars_toDict(df, 'Item No', 'Division')
    ProductGroup = Polars_toDict(df, 'Item No', 'Product Group')
    ItemCategory = Polars_toDict(df, 'Item No', 'Item Category')
    ItemClass = Polars_toDict(df, 'Item No', 'Item Family')
    ItemSubClass = Polars_toDict(df, 'Item No', 'Description')
    Universe = Polars_toDict(df, 'Item No', 'Uni.2')
    Theme = Polars_toDict(df, 'Item No', 'Theme')
    Type = Polars_toDict(df, 'Item No', 'InStore')
    Remarks = Polars_toDict(df, 'Item No', 'Remarks')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Style, return_dtype=pl.String, default=None).alias('Style Code'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ColourCode, return_dtype=pl.String, default=None).alias('Colour Code'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(SizeCode, return_dtype=pl.String, default=None).alias('Size'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ProductGroup, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Universe, return_dtype=pl.String, default=None).alias('Universe'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Theme, return_dtype=pl.String, default=None).alias('Theme'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Type, return_dtype=pl.String, default=None).alias('Type'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp


def VIMerchHier(dfTemp):
    # VI Master
    df = pl.read_excel(source=ashc.VincciMaster,sheet_name="VI_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Item No').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Item No'),)
    Division = Polars_toDict(df, 'Item No', 'Division')
    ProductGroup = Polars_toDict(df, 'Item No', 'Product Group')
    ItemCategory = Polars_toDict(df, 'Item No', 'Item Category')
    ItemClass = Polars_toDict(df, 'Item No', 'Sub Class')
    ItemSubClass = Polars_toDict(df, 'Item No', 'Sub Class')
    Remarks = Polars_toDict(df, 'Item No', 'Remarks')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ProductGroup, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Type'),)
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Theme'),)
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp


def YRMerchHier(dfTemp):
    # YR Master
    df = pl.read_excel(source=ashc.YRMaster,sheet_name="YR_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Style No.').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Style No.'),)
    Division = Polars_toDict(df, 'Style No.', 'Division')
    ProductGroup = Polars_toDict(df, 'Style No.', 'Product Group')
    ItemCategory = Polars_toDict(df, 'Style No.', 'Item Category')
    ItemClass = Polars_toDict(df, 'Style No.', 'Item Class')
    ItemSubClass = Polars_toDict(df, 'Style No.', 'Item Class')
    Remarks = Polars_toDict(df, 'Style No.', 'Extra')
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(ProductGroup, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Style Code").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Type'),)
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Theme'),)
    dfTemp = dfTemp.with_columns(pl.lit("FLW").alias('Season Code'),)
    dfTemp = dfTemp.with_columns(pl.lit("111").alias('Colour Code'),)
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Size'),)
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp

def LSMerchHier(dfTemp):
    # LS Master
    df = pl.read_excel(source=ashc.LSMaster,sheet_name="LS_Master",infer_schema_length=10000,).fill_null(0)
    df.fill_nan(0)
    df = df.with_columns(pl.col('Item No').map_elements(lambda x: str(int(float(x))).replace(".0",""), return_dtype=pl.String).alias('Style No.'),)
    Division = Polars_toDict(df, 'Item No', 'Division')
    ProductGroup = Polars_toDict(df, 'Item No', 'Product Group')
    ItemCategory = Polars_toDict(df, 'Item No', 'Item Category')
    ItemClass = Polars_toDict(df, 'Item No', 'Item Class')
    ItemSubClass = Polars_toDict(df, 'Item No', 'Item Class')
    Remarks = Polars_toDict(df, 'Item No', 'Extra')
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Division, return_dtype=pl.String, default=None).alias('Division'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ProductGroup, return_dtype=pl.String, default=None).alias('Product Group'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemCategory, return_dtype=pl.String, default=None).alias('Item Category'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemClass, return_dtype=pl.String, default=None).alias('Item Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(ItemSubClass, return_dtype=pl.String, default=None).alias('Item Sub Class'))
    dfTemp = dfTemp.with_columns(pl.col("Item No_").replace_strict(Remarks, return_dtype=pl.String, default=None).alias('Remarks'))
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Type'),)
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Theme'),)
    dfTemp = dfTemp.with_columns(pl.lit("FLW").alias('Season Code'),)
    dfTemp = dfTemp.with_columns(pl.lit("111").alias('Colour Code'),)
    dfTemp = dfTemp.with_columns(pl.lit("Not Available").alias('Size'),)
    dfTemp = dfTemp.fill_null(0)
    dfTemp = dfTemp.fill_nan(0)
    return dfTemp